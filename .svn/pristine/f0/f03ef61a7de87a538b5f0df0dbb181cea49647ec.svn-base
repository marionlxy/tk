package com.taikang.udp.sys.controller;

import java.util.Map;
import java.util.List;

import org.springframework.stereotype.Controller;

import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.common.datastructre.Dto;

import java.util.HashMap;

import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKStringUtils;

import javax.annotation.Resource;

import com.taikang.udp.framework.core.web.BaseController;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Arrays;

import com.taikang.udp.sys.action.IDictEntryAction;


/**
  *数据字典管理
  */
@Controller("dictEntryController")
@RequestMapping(value="/sys/dictEntry")
public class DictEntryController  extends BaseController  {
		
	@Resource(name=IDictEntryAction.ACTION_ID)
	private IDictEntryAction dictEntryAction;
		
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showDictEntryIndexPage() {
		return "sys/dict/dictEntryIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getDictEntryList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = dictEntryAction.queryForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	
	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showDictEntryEditPage(String dictTypeId,String dictId,Model model) {
				
		if(!TKStringUtils.isNullOrEmpty(dictTypeId))
		{
			model.addAttribute("dictTypeId",dictTypeId);
		}
		if(!TKStringUtils.isNullOrEmpty(dictId))
		{
			model.addAttribute("dictId",dictId);
		}
		
		return "sys/dict/dictEntryEdit"; 
	}
	
	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("add")
	public String showDictEntryAddPage(String dictTypeId,Model model) {
				
		if(!TKStringUtils.isNullOrEmpty(dictTypeId))
		{
			model.addAttribute("dictTypeId",dictTypeId);
		}
				
		return "sys/dict/dictEntryAdd"; 
	}
	
	/**
	 * 打开用户管理类别页面
	 * @return
	 */
	@RequestMapping("/toDictEntry")
	public String toDictEntry() {
		
		return "sys/dict/dictTypeIndex"; 
	}
	
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getDictEntryById(@RequestParam("dictTypeId")String dictTypeId,@RequestParam("dictId")String dictId)
	{
		Dto param = new BaseDto();
		param.put("dictTypeId", dictTypeId);
		param.put("dictId", dictId);
		return dictEntryAction.findOne(param);
	}
	
	/**
	 * 保存新增，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/saveAdd")
	@ResponseBody
	private Map<String,String> saveDictEntryAdd(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		Dto param = getParamAsDto(request);
		
		dictEntryAction.insertObject(param);
		
		map.put(MESSAGE_INFO, "新增成功！");
		map.put(RTN_RESULT, "true");						
		
		return map;
	}
	/**
	 * 保存修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/saveEdit")
	@ResponseBody
	private Map<String,String> saveDictEntryEdit(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		
		dictEntryAction.updateObject(param);
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "更新成功！");		
		
		return map;
	}
			
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteDictEntry(HttpServletRequest request) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = getParamAsDto(request);
		
		dictEntryAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
}


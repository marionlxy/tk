package com.taikang.iu.opt.employee.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.iu.com.ExcelUtil;
import com.taikang.iu.opt.employee.action.IEmployeeAction;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.framework.core.web.log.Log;
import com.taikang.udp.framework.core.web.log.LogLevel;
import com.taikang.udp.framework.core.web.log.OperType;
import com.taikang.udp.sys.action.IUserAction;
import com.taikang.udp.sys.util.UserUtils;
import com.taikang.udp.sys.util.sequence.BusinessSeqGenerator;
import com.taikang.udp.sys.util.vo.LoginUser;

/**
 * EmployeeController
 */
@Controller("employeeManageController")
@RequestMapping(value = "/employeeManage")
public class EmployeeManageController extends BaseController {

	@Resource(name = IEmployeeAction.ACTION_ID)
	private IEmployeeAction employeeAction;

	@Resource(name = IUserAction.ACTION_ID)
	private IUserAction userAction;

	@RequestMapping("")
	public String showEmployeeIndexPage() {
		return "employee/employeeManageIndex";
	}

	/**
	 * 分页查询员工信息列表
	 * 
	 * @return 分页列表数据
	 */
	@RequestMapping("/listEmployeeManage")
	@ResponseBody
	public Map<String, Object> getEmployeeList(HttpServletRequest request,
			CurrentPage page) {
		Map<String, Object> map = new HashMap<String, Object>();

		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = employeeAction.queryEmployeesForPage(page);// queryForPage(page);
		//
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		//
		return map;
	}

	/**
	 * 打开新增页面
	 * 
	 * @return String
	 */
	@RequestMapping("/add")
	public String oneRole() {
		return "employee/employeeManageAdd";
	}
	
	/**
	 * 打开修改页面
	 * @return
	 * String
	 */
	@RequestMapping("edit")
	public String showEmployeeManageEditPage(String employeeId,Model model) {
		
		if(employeeId!=null && !employeeId.equals(""))
		{
			model.addAttribute("employeeId",employeeId );
		}
		
		return "employee/employeeManageEdit"; 
	}
	
	/**
	 * 打开查看页面
	 * @return
	 * String
	 */
	@RequestMapping("view")
	public String showEmployeeManageViewPage(String employeeId,Model model) {
		
		if(employeeId!=null && !employeeId.equals(""))
		{
			model.addAttribute("employeeId",employeeId );
		}
		
		return "employee/employeeManageView"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getEmployeeManagerById(@RequestParam("employeeId")String employeeId)
	{
		Dto param = new BaseDto();
		param.put("employeeId", employeeId);
		return employeeAction.findOne(param);
	}
	
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/save")
	@ResponseBody
	private Map<String, String> saveEmployeeManageInfo(
			HttpServletRequest request) {
		Map<String, String> map = new HashMap<String, String>();
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		Dto param = getParamAsDto(request);
		if (param.get("employeeId") == null || "".equals(param.get("employeeId"))) {
			Dto oldParam = new BaseDto();
			oldParam.put("userCode", param.get("loginName"));
			Dto oldOne = userAction.findOne(oldParam);

			// 校验登录名是有已存在
			if (oldOne != null && oldOne.get("userCode") != null) {
				map.put(MESSAGE_INFO, "登录名已存在！");
				map.put(RTN_RESULT, "false");
				return map;
			}

			param.put("employeeId", UUID.randomUUID().toString().replace("-", ""));
			param.put("createdBy", loginId);
			param.put("modifiedBy", loginId);//modifiedBy
			param.put("createdTime", TKDateTimeUtils.getTodayTimeStamp());
			param.put("delflag", "0"); // “0”代表“未删除”
			param.put("version", 1);

			// 添加商户
			employeeAction.saveEmployeeManage(param);
			map.put(MESSAGE_INFO, "添加成功！");
		} else {
			Dto oldParam = new BaseDto();
			oldParam.put("employeeId", param.get("employeeId"));
//			// 查询数据库里商户数据
			Dto oldOne = employeeAction.findOne(oldParam);
//			oldOne.put("sellerType", param.get("sellerType"));
			oldOne.put("modifiedBy", loginId);
			oldOne.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
			oldOne.put("version",
					Integer.parseInt(oldOne.get("version").toString()) + 1);
			oldOne.put("employeeTel",param.get("employeeTel"));
			oldOne.put("employeeName",param.get("employeeName"));
			oldOne.put("employeeSex",param.get("employeeSex"));
			oldOne.put("employeeAddress",param.get("employeeAddress"));
			oldOne.put("site",param.get("site"));
//
//			// 更新商户数据
			//employeeAction.updateObject(oldOne);
			employeeAction.updateEmployeeManage(oldOne);
			map.put(MESSAGE_INFO, "修改成功！");
		}
		map.put(RTN_RESULT, "true");

		return map;

	}
	
	/**
	*删除一条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteEmployeeManage(@RequestParam("employeeId") String employeeId, @RequestParam("version") String version) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("employeeId", employeeId);
		// 删除改为逻辑删除
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		param.put("delflag", "1"); // “1”代表“已删除”
		param.put("version", Integer.parseInt(version)+1);
		employeeAction.updateObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	
	
	/**
	 * 导出excel员工信息列表
	 * getParamAsDto(request)
	 */
	@RequestMapping("/downloadEmployeeManage")
	@Log(message = "按条件查询员工信息", operType = OperType.READ, operName = "分页查询员工", level = LogLevel.TRACE)
	public void downLoadUser(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String fileName = "EmployeeExcel";
		Dto param = getParamAsDto(request);
		byte[] employeeNameArr = param.getAsString("employeeName").getBytes(
				"iso-8859-1");
		param.put("employeeName", new String(employeeNameArr, "UTF-8"));
		List<Dto> projects = createData(param);
		List<Map<String, Object>> listMap = createMapList(projects);
		String columnNames[] = { "员工编号", "员工姓名", "站点", "联系方式", "创建时间" };// 列名
		String keys[] = { "EMPLOYEE_CODE", "EMPLOYEE_NAME", "SITE",
				"EMPLOYEE_TEL", "CREATED_TIME" };// map中的key

		ByteArrayOutputStream os = new ByteArrayOutputStream();
		try {
			ExcelUtil.createWorkBook(listMap, keys, columnNames).write(os);
		} catch (IOException e) {
			e.printStackTrace();
		}
		byte[] content = os.toByteArray();
		InputStream is = new ByteArrayInputStream(content);
		// 设置response参数，可以打开下载页面
		response.reset();
		response.setContentType("application/vnd.ms-excel;charset=utf-8");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));
		ServletOutputStream out = response.getOutputStream();
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			bis = new BufferedInputStream(is);
			bos = new BufferedOutputStream(out);
			byte[] buff = new byte[2048];
			int bytesRead;
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (final IOException e) {
			throw e;
		} finally {
			if (bis != null)
				bis.close();
			if (bos != null)
				bos.close();
		}

	}

	private List<Map<String, Object>> createMapList(List<Dto> projects) {
		List<Map<String,Object>> listMap=new ArrayList<Map<String,Object>>();
		Map firstMap=new HashMap<String, Object>();		
		firstMap.put("sheetName", "sheet1");
		listMap.add(firstMap);
		 for (Dto dto : projects) {
			Map map=dto;
			String site=(String)map.get("SITE");//站点（010：北京，020：广州，021：上海，027：武汉，028：成都）
			if("010".equals(site)){
				map.put("SITE","北京");
			}else if("020".equals(site)){
				map.put("SITE","广州");
			}else if("021".equals(site)){
				map.put("SITE","上海");
			}else if("027".equals(site)){
				map.put("SITE","武汉");
			}else if("028".equals(site)){
				map.put("SITE","成都");
			}else{
				map.put("SITE","");
			}
			listMap.add(map);
		}
		return listMap;
	}
	
	

	private List<Dto> createData(Dto param) {
		return employeeAction.queryAllEmployeeByCondition(param);
	}


}

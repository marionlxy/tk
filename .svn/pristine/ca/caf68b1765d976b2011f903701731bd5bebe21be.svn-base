package com.taikang.iu.opt.order.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.iu.com.ExcelUtil;
import com.taikang.iu.opt.employee.action.IEmployeeAction;
import com.taikang.iu.opt.order.action.IOrderAction;
import com.taikang.iu.opt.order.model.OrderBO;
import com.taikang.iu.opt.seller.model.SellerBO;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.action.IUserRoleAction;
import com.taikang.udp.sys.util.UserUtils;
import com.taikang.udp.sys.util.vo.LoginUser;


/**
  * OrderController
  */
@Controller("orderController")
@RequestMapping(value="/order")
public class OrderController  extends BaseController  {

	@Resource(name=IOrderAction.ACTION_ID)
	private IOrderAction orderAction;
	/**
	 * 注入员工service
	 */
	@Resource(name=IEmployeeAction.ACTION_ID)
	private IEmployeeAction employeeAction;
	/**
	 * 注入用户角色service
	 */
	@Resource(name=IUserRoleAction.ACTION_ID)
	private IUserRoleAction userRoleAction;
	
	/**
	 * 跳到代理订单页面
	 * @return
	 */
	@RequestMapping(value="/showReferenceOrderPage")
	public String showReferenceOrderPage(){
		return "order/referenceOrderList";
	}
	/**
	 * 查看当前代理人的订单和别推荐人的订单
	 * @author t-zhaohan
	 * @Credited 2015年3月23日 下午6:22:08
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/getRefOrderList")
	@ResponseBody
	public Map<String,Object> getReferenceOrderList(HttpServletRequest request,CurrentPage page){
	Map<String, Object> map = new HashMap<String, Object>();
	    LoginUser user = UserUtils.getUser();
	    String userId = String.valueOf(user.getUserId());//代理人登陆名获得的用户code
	    Dto emp = new BaseDto();
	    emp.put("userId", userId);
	    Dto employee =  employeeAction.findOne(emp);//获得员工
	    
		Dto param = getParamAsDto(request);
		param.put("employeeTel", employee.getAsString("employeeTel"));
		page.setParamObject(param);
		CurrentPage currentPage = orderAction.queryReferenceOrderPage(page);
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		return map;
	}
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showOrderIndexPage() {
		return "order/orderIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getOrderList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		LoginUser user = UserUtils.getUser();
		String userId = String.valueOf(user.getUserId());//代理人登陆名获得的用户code
		Dto emp = new BaseDto();
		emp.put("userId", userId);
		Dto employee =  employeeAction.findOne(emp);//获得员工
		String employeeSite = "";
		if (employee.getAsString("employeeId")!=null && !"".equals(employee.getAsString("employeeId"))) {
			 employeeSite = employee.getAsString("site");//获得员工的站点
		}
		Dto empRole = new BaseDto();
		empRole.put("userId", userId);
		empRole.put("roleId", "2104");//roleId = 2104（运营经理）
		Dto newEmpRole = userRoleAction.findOne(empRole);//查询时否为运营经理
		Dto param = getParamAsDto(request);
		if (newEmpRole.isEmpty()) {
			param.put("site", employeeSite);//如果不是运营经理则放入站点查询条件
		}
		page.setParamObject(param);
		CurrentPage currentPage = orderAction.queryForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("/edit")
	public String showOrderEditPage(String rowId,Model model) {
		
		if(rowId!=null && !rowId.equals(""))
		{
			model.addAttribute("rowId",rowId );
		}
		
		return "order/orderEdit"; 
	}
	

	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getOrderById(@RequestParam("orderId")String orderId)
	{
		Dto param = new BaseDto();
		param.put("orderId", orderId);
		return orderAction.findOne(param);
	}
	
	
	/**
	 * 
	 * 获取订单信息
	 * @author t-lilong
	 * @Credited 2015年7月8日 上午11:06:19
	 * @return
	 */
	@RequestMapping("/getOneSev")
	@ResponseBody
	public Dto getOneSev(@RequestParam("subCode")String subCode)
	{
		Dto param = new BaseDto();
		param.put("subCode", subCode);
		return orderAction.findOneSeller(param);
	}
	/**
	 * 
	 * 获取用品订单信息
	 * @author t-lilong
	 * @Credited 2015年7月8日 上午14:30:19
	 * @return
	 */
	@RequestMapping("/getOneApp")
	@ResponseBody
	public Dto getOneApp(@RequestParam("orderId")String orderId,@RequestParam("subCode")String subCode)
	{
		Dto param = new BaseDto();
		param.put("orderId", orderId);
		return orderAction.findOneApp(param);
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveOrderInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			orderAction.insertObject(param);
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			orderAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteOrder(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		orderAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	
	/**
	 * 订单明细查询页面跳转
	 * */
	@RequestMapping(value="/showOrderList")
	public String showOrderList(String orderId , String orderType,String orderState,String subCode, Model model){
        String  view = null;
		if(orderId != null ){
			 model.addAttribute("orderId", orderId);
			 model.addAttribute("orderType", orderType);
			 model.addAttribute("orderState", orderState);
         }
         if(("1").equals(orderType)){
        	 if(StringUtils.isNotBlank(subCode) && !("undefined").equals(subCode) ){
        		 model.addAttribute("subCode", subCode);
        		 String temp = subCode.substring(0, 2);
        		 if(("FT").equals(temp)){
        			 view = "order/showOrderSevView";
        		 }else{
        			 view  = "order/showOrderView";
        		 }
        	 }else{
        		 view = "order/showOrderSevView";
        	 }
        	
         }else{
        	 view = "order/showOrderView";
         }
         return view ;
	}
	
	/**
	 * 指派服务商时的页面跳转
	 */
	@RequestMapping(value="/selectOrderSevIndex")
	public String selectOrderSevIndex(String serviceId ,String linkId,String serviceNum, Model model){
         if(serviceId != null &&  serviceNum != null && linkId != null ){
			 model.addAttribute("serviceId", serviceId); 
			 model.addAttribute("serviceNum", serviceNum);
			 model.addAttribute("linkId", linkId);
         }
        return "order/selectOrderSevIndex";
	}
	
	/**
	 * 导出订单列表excel
	 * @author t-pengyangyang
	 * @Credited 2015年7月16日 下午4:18:17
	 * @return
	 */
	  @RequestMapping(value="downloadYunying")
	    public String downloadYunying(HttpServletRequest request,HttpServletResponse response,CurrentPage page) throws IOException{
		  	String fileName="订单列表"+TKDateTimeUtils.getCurrentDate().toString().replace("-", "");
	        String orderCode =request.getParameter("orderCode");
	        //处理中文请求内容
	        byte[] newCustomName =request.getParameter("customName").getBytes("iso-8859-1");
	        String customName = new String(newCustomName,"UTF-8");
//	        String customName =request.getParameter("customName");
	        String orderType =request.getParameter("orderType");
	        String createdTime =request.getParameter("createdTime");
	        String createdTime1 =request.getParameter("createdTime1");
	        byte[] newAngelName =request.getParameter("angelName").getBytes("iso-8859-1");
	        String angelName = new String(newAngelName,"UTF-8");
//	        String angelName =request.getParameter("angelName");
	        String orderState =request.getParameter("orderState");
	        page.setParamObject(getParamAsDto(request));
	        //填充projects数据
	        List<OrderBO> projects=createData(orderCode,customName,orderType,createdTime,createdTime1,angelName,orderState);
	        List<Map<String,Object>> list=createExcelRecord(projects);
	        String columnNames[]={"订单编号","子订单编号","客户姓名","天使姓名","订单类型","订单总价","订单状态","发票类型","创建时间"};//列名
	        String keys[]   =    {"orderCode","subCode","customName","angelName","orderType","orderPrice","orderState","invoiceState","createdTime"};//map中的key
	        ByteArrayOutputStream os = new ByteArrayOutputStream();
	        try {
	            ExcelUtil.createWorkBook(list,keys,columnNames).write(os);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	        byte[] content = os.toByteArray();
	        InputStream is = new ByteArrayInputStream(content);
	        // 设置response参数，可以打开下载页面
	        response.reset();
	        response.setContentType("application/vnd.ms-excel;charset=utf-8");
	        response.setHeader("Content-Disposition", "attachment;filename="+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));
	        ServletOutputStream out = response.getOutputStream();
	        BufferedInputStream bis = null;
	        BufferedOutputStream bos = null;
	        try {
	            bis = new BufferedInputStream(is);
	            bos = new BufferedOutputStream(out);
	            byte[] buff = new byte[2048];
	            int bytesRead;
	            while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
	                bos.write(buff, 0, bytesRead);
	            }
	        } catch (final IOException e) {
	            throw e;
	        } finally {
	            if (bis != null)
	                bis.close();
	            if (bos != null)
	                bos.close();
	        }
	        return null;
	    }
	  
	    private List<OrderBO> createData(String orderCode,String customName,String orderType,String createdTime,String createdTime1,String angelName,String orderState) {
	    	Dto param = new BaseDto();
	    	if(orderCode != null){
	    		param.put("orderCode", orderCode);
	    	}
	    	if(customName != null){
	    		param.put("customName", customName);
	    	}
	    	if(orderType != null){
	    		param.put("orderType", orderType);
	    	}
	    	if(createdTime != null){
	    		param.put("createdTime", createdTime);
	    	}
	    	if(createdTime1 != null){
	    		param.put("createdTime1", createdTime1);
	    	}
	    	if(angelName != null){
	    		param.put("angelName", angelName);
	    	}
	    	if(orderState != null){
	    		param.put("orderState", orderState);
	    	}
	    	param.put("delflag", "0");
	    	List <OrderBO> list = orderAction.findAllOrder(param);
	        return list;
	    }
	    private List<Map<String, Object>> createExcelRecord(List<OrderBO> projects) {
	        List<Map<String, Object>> listmap = new ArrayList<Map<String, Object>>();
	        Map<String, Object> map = new HashMap<String, Object>();
	        map.put("sheetName", "sheet1");
	        listmap.add(map);
	        OrderBO orderBO=null;
	        for (int j = 0; j < projects.size(); j++) {
	        	orderBO=projects.get(j);
	            Map<String, Object> mapValue = new HashMap<String, Object>();
	            mapValue.put("orderCode",orderBO.getOrderCode());
	            mapValue.put("subCode", orderBO.getSubCode());
	            mapValue.put("customName", orderBO.getCustomName());
	            mapValue.put("angelName", orderBO.getAngelName());
	            mapValue.put("orderType", orderBO.getOrderType());
	            mapValue.put("orderPrice", orderBO.getOrderPrice());
	            mapValue.put("orderState", orderBO.getOrderState());
	            mapValue.put("invoiceState", orderBO.getInvoiceState());
	            mapValue.put("createdTime", orderBO.getCreatedTime());
	            listmap.add(mapValue);
	        }
	        return listmap;
	    }
	
	
	
}




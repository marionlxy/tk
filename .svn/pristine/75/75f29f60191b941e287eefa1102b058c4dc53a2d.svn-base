<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<!-- spring mvc -->
	<!-- view resolver 视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" 
		p:prefix="/WEB-INF/view/"
		p:suffix=".jsp" />
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.taikang.**.controller" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- MVC Annotation Driven -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean id="utf8StringHttpMessageConverter"
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>

				<bean id="jacksonMessageConverter"
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<!-- 解决 HttpMediaTypeNotAcceptableException: Could not find acceptable 
						representation -->
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 页面日期类型绑定转换到java的日期类型 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">  
		<property name="converters">  
	    	<list>  
	    		<bean class="com.taikang.udp.framework.common.util.web.TimestampConverter" />  
	        	<bean class="com.taikang.udp.framework.common.util.web.SqlDateConverter" />
	        	<bean class="com.taikang.udp.framework.common.util.web.DateConverter" />  
	    	</list>   
		</property>  
	</bean>	
	
	<!-- 解决数据库中的日期/时间类型到页面的显示格式 -->
	<bean id="customObjectMapper" class="com.taikang.udp.framework.common.util.web.CustomObjectMapper"></bean>
	
	<mvc:annotation-driven conversion-service="conversionService">
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
                <property name="objectMapper" ref="customObjectMapper"></property>  
            </bean>  
        </mvc:message-converters> 
	</mvc:annotation-driven>
	
	<!-- 系统日志跟踪功能 -->
	<bean id="log4JDBCImpl" class="com.taikang.udp.framework.core.web.log.impl.Log4JDBCImpl" >
		<property name="rootLogLevel" value="ERROR"/>
		<property name="customLogLevel">
           <map>
              <entry key="com.taikang.udp" value="TRACE" />
             <!--  <entry key="com.sample" value="INFO" /> -->
           </map>
       </property>
	</bean>
	
	<mvc:interceptors>
		<!-- 监控运行时间 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- <mvc:mapping path="/login/timeout/success"/> -->
			<!-- 通过session验证时用户信息取request的session中信息 -->
			<!-- <bean class="com.taikang.udp.framework.core.web.log.interceptor.LogInterceptor" > -->
			<!-- Shrio权限验证时日志拦截器使用自定义拦截器，通过UserUtils取缓存中的用户信息 -->
			<bean class="com.taikang.udp.sys.util.LogInterceptor" >
				<property name="logAPI" ref="log4JDBCImpl"/>
			</bean>
		</mvc:interceptor>		
	</mvc:interceptors>

	<!--  mvc:interceptors-->  
	    <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
	    <!--bean class="com.taikang.udp.framework.core.web.Interceptor.ValidationInterceptor"></bean-->
	<!-- /mvc:interceptors-->

    <!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
    <!-- 以下这个bean在spring-context-shiro.xml中也进行了定义       原因是： -->
    <!-- 
        定义在spring-mvc.xml里的对象，在applicationContext*.xml中是不可见的，
        想共享的东西最好放在applicationContext.xml那边。
        而applicationContext*.xml里的一些BeanPostProccesor，
        也不会作用到spring-mvc.xml定义/扫描到的Bean上，
        如果有必要就在spring-mvc.xml里重新定义一次，像Shiro的AOP校验权限。
     -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <!-- 用AOP控制方法时，把DefaultAdvisorAutoProxyCreator的proxyTargetClass属性设为true，与事务AOP一起使用cglib -->
        <property name="proxyTargetClass" value="true" />
    </bean>
    
	<!--  kindEditor 编辑器添加-->
    <bean id="multipartResolver" class="com.taikang.iu.biz.appliance.controller.MyMultipartResolver">
    	<property name="maxUploadSize">
    		<value>104857600</value>
    	</property>
    </bean>
        
    <!-- 关于异常处理：    可以将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果-->
    <!-- 
        通过SimpleMappingExceptionResolver我们可以将不同的异常映射到不同的jsp页面（通过exceptionMappings属性的配置）。
        同时我们也可以为所有的异常指定一个默认的异常提示页面（通过defaultErrorView属性的配置），
        如果所抛出的异常在exceptionMappings中没有对应的映射，则Spring将用此默认配置显示异常信息。
        注意这里配置的异常显示界面均仅包括主文件名，至于文件路径和后缀已经在viewResolver中指定。如/error/error表示/error/error.jsp
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <prop key="org.apache.shiro.authz.UnauthorizedException">/common/error/403</prop>
            </props>  
        </property>  
    </bean>  
    <!-- Shiro end -->	
	
	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->  
    <mvc:resources mapping="/static/images/**" location="/static/images/" /> 
    <mvc:resources mapping="/static/js/**" location="/static/js/"/>  
    <mvc:resources mapping="/static/css/**" location="/static/css/"/>
    <mvc:resources mapping="/image/**" location="/image/"/>
    <!--  测试使用-->
    <mvc:resources mapping="/static/upload/**" location="/static/upload/"/>
    <!--  生产使用-->
<!--     <mvc:resources mapping="/static/upload/**" location="/static/iuhnfsdta/"/> -->
<!--     <mvc:resources mapping="/upload/**" location="/static/iuhnfsdta/"/> -->
</beans>
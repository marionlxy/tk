package com.taikang.iu.opt.appraise.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.iu.opt.appraise.action.IAppraiseAction;
import com.taikang.iu.opt.appraise.action.IDimensionAction;
import com.taikang.iu.opt.appraise.model.AppraiseBO;
import com.taikang.iu.opt.appraise.model.DimensionBO;
import com.taikang.iu.opt.order.action.IOrderSevAction;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.util.UserUtils;
import com.taikang.udp.sys.util.vo.LoginUser;


/**
  * AppraiseController
  */
@Controller("appraiseController")
@RequestMapping(value="/appraise")
public class AppraiseController  extends BaseController  {
		
	@Resource(name=IAppraiseAction.ACTION_ID)
	private IAppraiseAction appraiseAction;
	@Resource(name=IDimensionAction.ACTION_ID)
	private IDimensionAction dimensionAction;
	@Resource(name=IOrderSevAction.ACTION_ID)
	private IOrderSevAction orderSevAction;
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showAppraiseIndexPage() {
		return "appraise/appraiseIndex"; 
	}
	/**
	 * 跳到添加的页面
	 * @return
	 */
	@RequestMapping("/add")
    public String toAddApprase(String orderSevId,String appariseState,String subId,String linkId,Model model){
		model.addAttribute("orderSevId", orderSevId);
		model.addAttribute("apprasiState", appariseState);
		model.addAttribute("subId",subId);
		model.addAttribute("linkId",linkId);
    	return "appraise/appraiseAdd";
    }
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getAppraiseList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = appraiseAction.queryForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showAppraiseEditPage(String rowId,Model model) {
		
		if(rowId!=null && !rowId.equals(""))
		{   
			
			model.addAttribute("rowId",rowId );
		}
		
		return "appraise/appraiseEdit"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	public String getAppraiseById(String appraiseId,Model model)
	{   
		AppraiseBO appraiseVo = new AppraiseBO();
		appraiseVo.setSubOrder("KL8999203");//传子订单的id
	    List<AppraiseBO> appraise = appraiseAction.findUniquedAppraise(appraiseVo);
		DimensionBO vo = new DimensionBO();
		vo.setAppraiseId(appraiseId);
		List<DimensionBO> dimensionVo = dimensionAction.queryFindDimensionList(vo);
		model.addAttribute("dimensionVo",dimensionVo);
		model.addAttribute("appraise",appraise.get(0));
        return "/appraise/appraiseView";
	}
	
	/**
	 * 获得评价信息
	 * @author t-zhaohan
	 * @Credited 2015年3月30日 下午7:53:08
	 * @see       [相关类/方法]
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/getOneAppraise")
	@ResponseBody
	public Dto getOneAppraise(@RequestParam("orderSevId")String orderSevId,@RequestParam("subId")String subId,@RequestParam("linkId")String linkId)
	{
		Dto param = new BaseDto();
		param.put("subOrder", orderSevId);
		param.put("customId", subId);
		param.put("modifiedBy", linkId);
		return appraiseAction.findOne(param);
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveAppraiseInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		Dto param = getParamAsDto(request);
		if(param.get("appraiseId") ==null ||"".equals(param.get("appraiseId")))
		{  
			String appraiseId = UUID.randomUUID().toString().replace("-","");
			param.put("appraiseId",appraiseId);
			param.put("createdTime",TKDateTimeUtils.getTodayTimeStamp());
			param.put("createdBy",loginId);
			param.put("delflag","0"); // “0”代表“未删除”
			param.put("version", 1);
			param.put("subOrder",param.get("orderSevId"));
			param.put("customId",param.get("subId"));//临时存放子订单id
			param.put("modifiedBy", param.get("linkId"));//环节id临时使用
			//appraiseAction.insertObject(param);
			appraiseAction.updateAppraiseAndOrderStatus(param, param.get("orderSevId").toString(),param.get("subId").toString());
//			Dto  sevDto = new BaseDto();
//			sevDto.put("appraiseState",1);
//			sevDto.put("orderSevId",param.get("orderSevId"));
//		    orderSevAction.updateObject(sevDto);//”调试后期改“
//			String [] score = param.get("dimensionScore1").toString().split(",");
//			String [] field = param.get("dimensionFieldAgo").toString().split("-");
//			if( param.get("dimensionScore1").toString() == null ||  param.get("dimensionScore1").toString() == ""){
//		    for(int i = 0; i < score.length; i++){
//		    	param.put("dimensionId", UUID.randomUUID().toString().replace("-",""));
//		    	param.put("appraiseId",appraiseId);
//		    	param.put("dimensionScore",score[i]);
//		    	param.put("dimensionField",field[i]);
//		    	dimensionAction.insertObject(param);
//		    }
//			}
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			param.put("modifiedBy", loginId);
			param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
			param.put("version", Integer.parseInt(param.get("version").toString())+1);
			appraiseAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteAppraise(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		appraiseAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
}


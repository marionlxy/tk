package com.taikang.iu.opt.worksheet.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.iu.opt.clue.action.IClueAction;
import com.taikang.iu.opt.employee.action.IEmployeeAction;
import com.taikang.iu.opt.employee.model.EmployeeBO;
import com.taikang.iu.opt.worksheet.action.IWorksheetAction;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.action.IUserAction;
import com.taikang.udp.sys.model.DictEntryBO;
import com.taikang.udp.sys.util.UserUtils;
import com.taikang.udp.sys.util.sequence.BusinessSeqGenerator;
import com.taikang.udp.sys.util.vo.LoginUser;


/**
  * WorksheetController
  */
@Controller("worksheetController")
@RequestMapping(value="/worksheet")
public class WorksheetController  extends BaseController  {
		
	@Resource(name=IWorksheetAction.ACTION_ID)
	private IWorksheetAction worksheetAction;
	@Resource(name=IClueAction.ACTION_ID)
	private IClueAction clueAction;
	//用户表
	@Resource(name=IUserAction.ACTION_ID)
	private IUserAction userAction;
	@Resource(name=IEmployeeAction.ACTION_ID)
	private IEmployeeAction employeeAction;
	/**
	 * 派工单的页面
	 */
	@RequestMapping("/worksheetClue")
	public String showWorksheetIndexPageN() {
		return "worksheet/wclueIndex"; 
	}
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/clueList")
	@ResponseBody
	public Map<String,Object> getClueList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		Dto dto = getParamAsDto(request);
		page.setParamObject(dto);
		CurrentPage currentPage = clueAction.cluequeryForPage(page);
		//创建人，通过查询user表，把userName 传给CREATED_BY
		List<Dto> clueList =  new LinkedList<Dto>();
		clueList = currentPage.getPageItems();
		
		for (int i = 0; i < clueList.size(); i++) {
			Dto clueBO = new BaseDto();
			 clueBO =   clueList.get(i);
			 if(clueBO.get("CREATED_BY") != null){
				 if(!clueBO.get("CREATED_BY").equals("客户发起")){
					 
					 Dto user = new BaseDto();
					 user.put("userId", clueBO.get("CREATED_BY"));
					 Dto userOne = userAction.findOne(user);
					 clueBO.put("CREATED_BY", userOne.get("userName"));
				 }
			 }

		
		}
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	/**
	 * 坐席打开的页面
	 * @return 页面地址
	 */
	@RequestMapping("/worksheetIndexNew")
	public String showWorksheetIndexNewPage() {
		return "worksheet/worksheetIndexNew"; 
	}
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showWorksheetIndexPage() {
		return "worksheet/worksheetIndex"; 
	}
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getWorksheetList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = worksheetAction.queryForPage(page);
		//创建人，通过查询user表，把userName 传给CREATED_BY
				List<Dto> worksheetList =  new LinkedList<Dto>();
				worksheetList = currentPage.getPageItems();
				
				for (int i = 0; i < worksheetList.size(); i++) {
					Dto clueBO = new BaseDto();
					 clueBO =   worksheetList.get(i);
					 if(clueBO.get("CREATED_BY") != null){
						 String clue =  clueBO.get("CREATED_BY").toString();
						 if(clue.getBytes().length == clue.length()){//没有汉字
							 
							 if(!clueBO.get("CREATED_BY").equals("客户发起")){
								 
								 Dto user = new BaseDto();
								 user.put("userId", clueBO.get("CREATED_BY"));
								 Dto userOne = userAction.findOne(user);
								 clueBO.put("CREATED_BY", userOne.get("userName"));
							 }
						 }
					 }
				}
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("/edit")
	public String showWorksheetEditPage(String worksheetId,Model model) {
		
		if(worksheetId!=null && !worksheetId.equals(""))
		{
			model.addAttribute("worksheetId",worksheetId );
		}
		
		return "worksheet/worksheetEdit"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getWorksheetById(@RequestParam("worksheetId")String worksheetId)
	{
		Dto param = new BaseDto();
		param.put("worksheetId", worksheetId);
		return worksheetAction.findOne(param);
	}
	/**弹出框输入天使信息
	 * 
	 * @param clueId
	 * @param model
	 * @return
	 */
	@RequestMapping("wedit")
	public String showClueEditPage1(String clueId,Model model) {
		
		if(clueId!=null && !clueId.equals(""))
		{
			model.addAttribute("clueId",clueId );
		}
		
		return "worksheet/wclueEdit"; 
	}
	/**
	 * 打开详细页面
	 * @return
	 * String
	 */
	@RequestMapping("/view")
	public String showWorksheetViewPage(String worksheetId,Model model) {
		
		if(worksheetId!=null && !worksheetId.equals(""))
		{
			model.addAttribute("worksheetId",worksheetId );
		}
		
		return "worksheet/worksheetView"; 
	}
	
	/**
	*
	*已派工单
	*/
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/weditSave")
	@ResponseBody
	public Map<String, String>  worksheetEdite(HttpServletRequest request) {
		Map<String, String> map = new HashMap<String, String>();
		Dto paramNew = getParamAsDto(request);
		int clueSate = Integer.parseInt(paramNew.get("clueState").toString());
		if( clueSate == 3){
			map.put(RTN_RESULT, "true");
			map.put(MESSAGE_INFO, "线索已派工单！");
		}else{
		Dto param = new BaseDto();
		param.put("clueId", paramNew.get("clueId"));
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);	
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		param.put("clueState", "3"); //clueState "0"，代表未确认，"1"代表确认有效，"2"代表确认无效,"3"代表已派工单
		param.put("version", Integer.parseInt(paramNew.get("version").toString())+1);
		clueAction.updateObject(param);
		//根据clueId 查询工单
		
			if(!paramNew.get("clueId").equals("")){
				Dto worksheet = new BaseDto();

				if(worksheet.get("worksheetId") == null || "".equals(worksheet.get("worksheetId"))){
					worksheet.put("worksheetId", UUID.randomUUID().toString().replace("-", ""));
					worksheet.put("worksheetCode", "GD"+TKDateTimeUtils.getCurrentDate().toString().replace("-", "")+BusinessSeqGenerator.getInstance("WORKSHEET_CODE").nextId());
					worksheet.put("worksheetState", "0");
					worksheet.put("angelCode", paramNew.get("angelCode"));//天使编号
					worksheet.put("angelName", paramNew.get("angelName")); //天使姓名
					worksheet.put("angelTel", paramNew.get("angelTel"));//天使电话
					
					
					//线索的数据
					worksheet.put("clueId", paramNew.get("clueId"));
					worksheet.put("clueCode", paramNew.get("clueCode"));
					worksheet.put("customId", paramNew.get("customId"));
					worksheet.put("customName", paramNew.get("customName"));
					worksheet.put("customSex", paramNew.get("customSex"));
					worksheet.put("customTel", paramNew.get("customTel"));
					worksheet.put("customAddress", paramNew.get("customAddress"));
					worksheet.put("customRequire", paramNew.get("customRequire"));
					worksheet.put("doorTime", paramNew.get("doorTime"));
					worksheet.put("invalidReason", paramNew.get("invalidReason"));
					worksheet.put("proxyTel", paramNew.get("proxyTel"));
					worksheet.put("remark", paramNew.get("remark"));

					//常用的数据
					worksheet.put("createdBy", loginId);
					worksheet.put("createdTime", TKDateTimeUtils.getTodayTimeStamp());
					worksheet.put("delflag", "0"); // “0”代表“未删除”
					worksheet.put("version", 1);
					
					worksheetAction.insertObject(worksheet);
				}
			}
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		
		
		}
		return map;
	}
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveWorksheetInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserName());
		
		Dto param = getParamAsDto(request);
		if(param.get("worksheetId") ==null ||"".equals(param.get("worksheetId")))
		{
//			param.put("clueId",param.get("clueId"));
//			param.put("angelName",param.get("angelName"));
//			param.put("angelTel",param.get("angelTel"));
			param.put("worksheetId", UUID.randomUUID().toString().replace("-", ""));
//			param.put("angelCode", "GD"+TKDateTimeUtils.getCurrentDate().toString().replace("-", "")+BusinessSeqGenerator.getInstance("ANGELCODE").nextId());
			param.put("worksheetCode", "GD"+TKDateTimeUtils.getCurrentDate().toString().replace("-", "")+BusinessSeqGenerator.getInstance("WORKSHEET_CODE").nextId());
			param.put("worksheetState", "1"); // “1”代表“使用中”
			param.put("createdBy", loginId);
			param.put("createdTime", TKDateTimeUtils.getTodayTimeStamp());
			param.put("delflag", "0"); // “0”代表“未删除”
			param.put("version", 1);
			worksheetAction.insertObject(param);
			
			map.put(MESSAGE_INFO, "添加成功！");
			
		}
		else
		{
			param.put("angelName",param.get("angelName"));
			param.put("angelTel",param.get("angelTel"));
			param.put("modifiedBy", loginId);
			param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
			param.put("version", Integer.parseInt(param.get("version").toString())+1);
			worksheetAction.updateObject(param);
			map.put(MESSAGE_INFO, "修改成功！");
		}
		map.put(RTN_RESULT, "true");
		showWorksheetIndexPage();
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteWorksheet(@RequestParam("worksheetId") String worksheetId, @RequestParam("version") String version) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("worksheetId", worksheetId);
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		param.put("delflag", "1"); // “1”代表“已删除”
		param.put("version", Integer.parseInt(version)+1);
		worksheetAction.updateObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	/**
	 * 获取员工的天使信息
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/getAngelList")
	@ResponseBody
	public List getAngel()
	{
		Dto tmpDto = new BaseDto();
		Dto param = new BaseDto();
		List<EmployeeBO> getAngelList = employeeAction.finAllEmpTS(param);
		List<Dto> listDto = new ArrayList<Dto>();
		for (EmployeeBO employeeBO : getAngelList) {
			tmpDto = new BaseDto();
			tmpDto.put("angelCode", employeeBO.getEmployeeCode());
			tmpDto.put("angelName", employeeBO.getEmployeeName());
			tmpDto.put("angelTel", employeeBO.getEmployeeTel());
			
			listDto.add(tmpDto);
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("rows", listDto);
		return listDto;
	}
}


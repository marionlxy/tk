package com.taikang.iu.opt.finance.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.iu.opt.finance.action.IFinanceAction;
import com.taikang.iu.opt.finance.model.FinanceBO;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.util.UserUtils;
import com.taikang.udp.sys.util.vo.LoginUser;


/**
  * FinanceController
  */
@Controller("financeController")
@RequestMapping(value="/finance")
public class FinanceController  extends BaseController  {
		
	@Resource(name=IFinanceAction.ACTION_ID)
	private IFinanceAction financeAction;
		
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showFinanceIndexPage(Model model) {
		Dto param=new BaseDto();
		List<Dto> list=financeAction.findAll(param);
		if(list.get(0)==null||"".equals(list.get(0)))
		{			
			model.addAttribute("countPrice","0");
		}
		else
		{
			model.addAttribute("countPrice",list.get(0).get("countPrice"));
		}
		return "finance/financeIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@SuppressWarnings("unused")
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getFinanceList(HttpServletRequest request,CurrentPage page,Model model){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = financeAction.queryForPage(page);
	
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showFinanceEditPage(String rowId,Model model) {
		if(rowId!=null && !rowId.equals(""))
		{
			model.addAttribute("rowId",rowId );
		}
		
		return "finance/financeEdit"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getFinanceById(@RequestParam("rowId")String rowId)
	{
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		return financeAction.findOne(param);
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveFinanceInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			financeAction.insertObject(param);
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			financeAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteFinance(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		financeAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	
	/**
	 * 修改对账状态为已到账
	 * @param orderId
	 * @return
	 */
	@RequestMapping(value="ok")
	@ResponseBody
	public Map<String,String> ok(String orderId)
	{
		System.out.println(orderId);
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("orderId", orderId);
		param.put("accountState", "1");
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		Dto versionParam = new BaseDto();
		versionParam.put("orderId", orderId);
		Dto versionResult = financeAction.findOne(versionParam);
		int version = 1;
		
		// 如果version为null时，将version置为2 (防止插入数据时没有为version赋值)
		if(versionResult.get("version") == null || "".equals(versionResult.get("version"))){
			version = 2;
		}else {
			version = Integer.parseInt(versionResult.get("version").toString())+1;
		}
		
		param.put("version", version);
		financeAction.updateObject(param);
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		return map;
	}
	
	/**
	 * 修改对账状态为未到账
	 * @param orderId
	 * @return
	 */
	@RequestMapping(value="ok1")
	@ResponseBody
	public Map<String,String> ok1(String orderId)
	{
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("orderId", orderId);
		param.put("accountState", "0");
		
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		Dto versionParam = new BaseDto();
		versionParam.put("orderId", orderId);
		Dto versionResult = financeAction.findOne(versionParam);
		int version = 1;
		
		// 如果version为null时，将version置为2 (防止插入数据时没有为version赋值)
		if(versionResult.get("version") == null || "".equals(versionResult.get("version"))){
			version = 2;
		}else {
			version = Integer.parseInt(versionResult.get("version").toString())+1;
		}
		
		param.put("version", version);
		financeAction.updateObject(param);
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		return map;
	}
	
	
	/**
	 * 修改对账状态为作废
	 * @param orderId
	 * @return
	 */
	@RequestMapping(value="ok2")
	@ResponseBody
	public Map<String,String> ok2(String orderId)
	{
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("orderId", orderId);
		param.put("accountState", "2");
		
		LoginUser user = UserUtils.getUser();
		String loginId = String.valueOf(user.getUserId());
		param.put("modifiedBy", loginId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		Dto versionParam = new BaseDto();
		versionParam.put("orderId", orderId);
		Dto versionResult = financeAction.findOne(versionParam);
		int version = 1;
		
		// 如果version为null时，将version置为2 (防止插入数据时没有为version赋值)
		if(versionResult.get("version") == null || "".equals(versionResult.get("version"))){
			version = 2;
		}else {
			version = Integer.parseInt(versionResult.get("version").toString())+1;
		}
		
		param.put("version", version);
		financeAction.updateObject(param);
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		return map;
	}
}


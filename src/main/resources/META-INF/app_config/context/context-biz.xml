<?xml version="1.0" encoding="UTF-8"?>
<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:p="http://www.springframework.org/schema/p"
    
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">
    
    <!-- =================== 框架层面配置 ====Start==============  -->
    <!-- 引入属性文件 -->
    <bean name="propertyConfiger" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:META-INF/app_config/properties/init.config.properties</value>
            </list>
        </property>
    </bean>
    
    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_username}" />
        <property name="password" value="${jdbc_password}" />
        <property name="driverClassName" value="${jdbc_driverClass}" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="2" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="100" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <property name="poolPreparedStatements" value="true" />         
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="stat" />
    </bean>
        
    <context:annotation-config />
    
    <!-- myBatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="configLocation" value="classpath:${mybatis.config}"/>
        <property name="mapperLocations" value="classpath*:com/taikang/**/mapper/*_mapper.xml" />
    </bean>
            
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg>
            <ref bean="sqlSessionFactory"/>
        </constructor-arg>
    </bean>
        
    <bean id="appDao" class="com.taikang.udp.framework.core.persistence.dao.impl.BaseDaoImpl" > 
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/> 
    </bean>
    
    <!-- 业务主键号码服务DAO -->
    <bean id="sequenceDao" class="com.taikang.udp.sys.util.sequence.dao.impl.SequenceDaoImpl" > 
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/> 
    </bean>
        
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- start  配置声明式事务管理  由spring管理mybatis的事务-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>

            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="datagrid*" read-only="true" />
            
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config>    
        <aop:pointcut id="transactionPointcut" expression="(execution(* com.taikang..*.action..*ActionImpl.*(..)))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
    <!-- 引入框架的配置文件 -->
    <import resource="classpath:/META-INF/udp_config/context-tkf-framework.xml" />
    <!-- =================== 框架层面配置 ==End================  -->
    
    <!-- 自动扫描(自动注入所有的service和action) -->
    <context:component-scan base-package="com.taikang.**.service;com.taikang.**.action" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    
    <!-- 
    <bean id="cacheManagerFactory"
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
        p:configLocation="classpath:${ehcache.config}" />
    
    <bean id="cacheManager" class="com.taikang.udp.framework.common.cache.EhCacheCacheManagerEx"
        p:cacheManager-ref="cacheManagerFactory">
    </bean>
    -->
    <!-- 缓存配置 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:${ehcache.config}" />
    </bean>
    
    <bean id="fileloadAction" class="com.taikang.udp.sys.action.impl.FileloadActionImpl">
        <property name="upLoadPath" value="${default_upload_filepath}" />
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="defaultEncoding" value="utf-8"></property>   
        <property name="maxUploadSize" value="10485760000"></property>  
        <property name="maxInMemorySize" value="40960"></property>  
	</bean>
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/common/error/app-error.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/common/error/app-error</prop>  
            </props>  
        </property>  
    </bean>
    
    <!-- 配置定时器 -->
	<!-- 管理触发器的总设置，可以放置多个触发器 -->
	<bean name="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="mainTrigger" />
				<ref bean="orderTrigger" />
				<ref bean="systemTrigger" />
			</list>
		</property>
	</bean>
	<!-- 触发器bean的设置，在这里我们设置了我们要触发的jobDetail是哪个，即触发器去触发哪个bean，并且定义了触发时间 -->	
	<bean id="mainTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="JobReGoods" />
		</property>
		<property name="cronExpression">
<!--	配置时间表达式  每天0点钟整触发时间 格式为 秒 分 时 日 月 星期 年（可选）-->
		<value>0 0 0 * * ?</value>
		</property>
	</bean>
		<bean id="orderTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="orderOne" />
		</property>
		<property name="cronExpression">
<!--	配置时间表达式  每天0点钟整触发时间 格式为 秒 分 时 日 月 星期 年（可选）-->
		<value>0 0 0 * * ?</value>
		</property>
	</bean>
	<bean id="systemTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="systemOne" />
		</property>
		<property name="cronExpression">
<!--	配置时间表达式  每天0点钟整触发时间 格式为 秒 分 时 日 月 星期 年（可选）-->
		<value>0 0 0 * * ?</value>
		</property>
	</bean>
	<!-- 定义定时执行的触发器类内的方法 concurrent（false不可并发）-->
	<bean id="JobReGoods" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property  name="targetObject">
			<ref bean="mainReGoods" />
		</property>
		<property  name="targetMethod">
			<value>confrimReGoods</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<bean id="orderOne" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property  name="targetObject">
			<ref bean="orderJob" />
		</property>
		<property  name="targetMethod">
			<value>confrimAppSign</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
		<bean id="systemOne" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property  name="targetObject">
			<ref bean="systemJob" />
		</property>
		<property  name="targetMethod">
			<value>freshCurrent</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<!-- 定时器运行的类  -->
    <bean id="mainReGoods" class="com.taikang.iu.job.service.impl.RegoodsJob" />
    <bean id="orderJob" class="com.taikang.iu.job.service.impl.OrderJob" />
    <bean id="systemJob" class="com.taikang.iu.job.service.impl.SystemJob" />
    
	<!-- 定时器设置完成 -->
    
    <!-- 应用加载成功后需要执行的内容 -->
    <import resource="classpath:/META-INF/app_config/web/context-web-app.xml" />
    
</beans>
